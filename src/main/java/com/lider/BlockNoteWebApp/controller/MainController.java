package com.lider.BlockNoteWebApp.controller;

import com.lider.BlockNoteWebApp.domain.*;
import com.lider.BlockNoteWebApp.repos.ProductRepo;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.security.core.annotation.AuthenticationPrincipal;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.CookieValue;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.multipart.MultipartFile;

import javax.servlet.http.Cookie;
import javax.servlet.http.HttpServletResponse;
import java.io.File;
import java.io.IOException;
import java.math.BigInteger;
import java.time.Instant;
import java.time.LocalDate;
import java.util.*;

@Controller
public class MainController {

    @Autowired // This means to get the bean called ProductRepo
                // Which is auto-generated by Spring, we will use it to handle the data
    private ProductRepo ProductRepo;
    @Autowired // This means to get the bean called ProductRepo
    // Which is auto-generated by Spring, we will use it to handle the data
    private com.lider.BlockNoteWebApp.repos.OrderRepo OrderRepo;
    @Autowired
    private com.lider.BlockNoteWebApp.repos.UserRepo UserRepo;
    @Autowired
    private com.lider.BlockNoteWebApp.repos.OrderDetailRepo OrderDetailRepo;

    //получаем переменную пути для картинок
    @Value("${upload.path}") // Using Spring Expression language. Searching for upload path in properties
    private String uploadPath; //


    @GetMapping("/")
    public String greeting(Map<String, Object> model) {
        return "greeting";
    }

    @GetMapping("/main")
    public String main(
            @CookieValue String incart,
            HttpServletResponse response,
            @RequestParam(required = false, defaultValue = "") String filter,
            Model model
    ) {
        Iterable<Product> products = ProductRepo.findAll();

        if (filter != null && !filter.isEmpty())
            products = ProductRepo.findByName(filter);
        else
            products = ProductRepo.findAll();

        if (incart == "") {
            // create a cookie
            Cookie cookie = new Cookie("incart", "0");
            cookie.setPath("/");
            //add cookie to response
            response.addCookie(cookie);
        }

        model.addAttribute("products", products);
        model.addAttribute("filter", filter);

        return "main";
    }

    //Adding new message to the system
    @PostMapping("/main")
    public String add(
//            @AuthenticationPrincipal User user,
//            @RequestParam String text,
//            @RequestParam String tag,
            @RequestParam(required = false, defaultValue = "") String name,
            @RequestParam(required = false, defaultValue = "") String shortDescr,
            @RequestParam(required = false, defaultValue = "") String longDescr,
            @RequestParam(required = false, defaultValue = "0") int cost,
            @RequestParam(required = false, name="file") MultipartFile file,
            Model model,
            @AuthenticationPrincipal User user,
            @RequestParam(required = false, defaultValue = "0") BigInteger productId
    ) throws IOException {
        if (productId == BigInteger.valueOf(0) || !"".equals(name)) { // если это запрос не от кнопки добавления в корзину
            //Message message = new Message(text, tag, user);
            Product product = new Product(name, shortDescr, longDescr, cost);

            if (file != null && !file.getOriginalFilename().isEmpty()) {
                File uploadDir = new File(uploadPath);
                if (!uploadDir.exists()) {
                    uploadDir.mkdir();
                }
                //Universe Unique Identificator
                String uuid = UUID.randomUUID().toString();
                String resultFileName = uuid + "." + file.getOriginalFilename();

                file.transferTo(new File(uploadPath + "/" + resultFileName)); //загружаем файл
                product.setImageFileName(resultFileName);
            }

            ProductRepo.save(product);
        }
        else {
            addToCart(user, productId, model);
        }

        Iterable<Product> products = ProductRepo.findAll();
        model.addAttribute("products", products);
        return "main";
    }

//    @GetMapping(path="/all")
//    public @ResponseBody Iterable<User> getAllUsers() {
//        // This returns a JSON or XML with the users
//        return userRepository.findAll();
//    }

    private void addToCart(
            User user,
            BigInteger productId,
            Model model
    ) {
        Order order = OrderRepo.findByCustomer(user);

        Product product = ProductRepo.findById(productId).get();

        Date date = new Date();
        if (order == null) {
            //Проверить user на наличие. Если не зарегистрирован непонятно что делать
            order = new Order(date, product.getCost(), user);
        }

        int price = product.getCost();
        int quanity = 1;

        OrderDetail orderdetails = OrderDetailRepo.findByProductId(productId);
        if (orderdetails == null) {
            orderdetails = new OrderDetail(quanity*price, price, quanity, order, product);
        }
        else {
            quanity += orderdetails.getQuanity();
            orderdetails.setQuanity(quanity);
            orderdetails.setAmount(quanity*price);
        }

        Integer am = order.getAmount();
        order.setAmount(am + price);

        OrderRepo.save(order);
        OrderDetailRepo.save(orderdetails);
    }
}