package com.lider.BlockNoteWebApp.controller;

import com.lider.BlockNoteWebApp.domain.Message;
import com.lider.BlockNoteWebApp.domain.Product;
import com.lider.BlockNoteWebApp.domain.User;
import com.lider.BlockNoteWebApp.repos.ProductRepo;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.security.core.annotation.AuthenticationPrincipal;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.multipart.MultipartFile;

import java.io.File;
import java.io.IOException;
import java.util.Map;
import java.util.UUID;

@Controller
public class MainController {

    @Autowired // This means to get the bean called ProductRepo
                // Which is auto-generated by Spring, we will use it to handle the data
    private ProductRepo ProductRepo;

    //получаем переменную пути для картинок
    @Value("${upload.path}") // Using Spring Expression language. Searching for upload path in properties
    private String uploadPath; //


    @GetMapping("/")
    public String greeting(Map<String, Object> model) {
        return "greeting";
    }

    @GetMapping("/main")
    public String main(
            @RequestParam(required = false, defaultValue = "") String filter,
            Model model
    ) {
        Iterable<Product> products = ProductRepo.findAll();

        if (filter != null && !filter.isEmpty())
            products = ProductRepo.findByName(filter);
        else
            products = ProductRepo.findAll();

        model.addAttribute("products", products);
        model.addAttribute("filter", filter);

        return "main";
    }

    //Adding new message to the system
    @PostMapping("/main")
    public String add(
//            @AuthenticationPrincipal User user,
//            @RequestParam String text,
//            @RequestParam String tag,
            @RequestParam String name,
            @RequestParam String shortDescr,
            @RequestParam String longDescr,
            @RequestParam int cost,
            @RequestParam("file") MultipartFile file,
            Map<String, Object> model
    ) throws IOException {
        //Message message = new Message(text, tag, user);
        Product product = new Product(name, shortDescr, longDescr, cost);

        if(file != null && !file.getOriginalFilename().isEmpty()) {
            File uploadDir = new File(uploadPath);
            if(!uploadDir.exists()) {
                uploadDir.mkdir();
            }
            //Universe Unique Identificator
            String uuid = UUID.randomUUID().toString();
            String resultFileName = uuid + "." + file.getOriginalFilename();

            file.transferTo(new File(uploadPath + "/" + resultFileName)); //загружаем файл
            product.setImageFileName(resultFileName);
        }

        ProductRepo.save(product);

        Iterable<Product> products = ProductRepo.findAll();
        model.put("products", products);

        return "main";
    }

//    @GetMapping(path="/all")
//    public @ResponseBody Iterable<User> getAllUsers() {
//        // This returns a JSON or XML with the users
//        return userRepository.findAll();
//    }
}