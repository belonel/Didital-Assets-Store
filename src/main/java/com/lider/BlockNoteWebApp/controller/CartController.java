package com.lider.BlockNoteWebApp.controller;

import com.lider.BlockNoteWebApp.domain.Order;
import com.lider.BlockNoteWebApp.domain.OrderDetail;
import com.lider.BlockNoteWebApp.domain.Product;
import com.lider.BlockNoteWebApp.domain.User;
import com.lider.BlockNoteWebApp.repos.OrderDetailRepo;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.core.annotation.AuthenticationPrincipal;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;

import java.math.BigInteger;
import java.util.Date;
import java.util.List;
import java.util.Map;

import com.lider.BlockNoteWebApp.repos.*;

@Controller
@RequestMapping("/cart") //чтобы в каждом методе отдельно не прописывать
public class CartController {

    @Autowired // This means to get the bean called ProductRepo
    // Which is auto-generated by Spring, we will use it to handle the data
    private OrderRepo OrderRepo;
    @Autowired
    private UserRepo UserRepo;
    @Autowired
    private OrderDetailRepo OrderDetailRepo;
    @Autowired
    private ProductRepo ProductRepo;


    @GetMapping
    public String cartView(
            @RequestParam String userId,
            Map<String, Object> model
    ) {
//        Order order = OrderRepo.findByCustomerId(Long.parseLong(userId));
//        List<OrderDetail> orderDetails = OrderDetailRepo.findAllByOrderId(order.getOrderId());
//
//        model.put("order", order);
//        model.put("orderdetails", orderDetails);

        return "cart";
    }

//    @PostMapping("/cart")
//    public void addToCart(
//            @AuthenticationPrincipal User user,
//            @RequestParam BigInteger productId,
//            Model model
//    ) {
//        Order order = OrderRepo.findByCustomer(user);
//
//        Product product = ProductRepo.findById(productId).get();
//
//        Date date = new Date();
//        if (order == null) {
//            //Проверить user на наличие. Если не зарегистрирован непонятно что делать
//            order = new Order(date, product.getCost(), user);
//        }
//
//        int price = product.getCost();
//        int quanity = 1;
//
//        OrderDetail orderdetails = OrderDetailRepo.findByProductId(productId);
//        if (orderdetails == null) {
//            orderdetails = new OrderDetail(quanity*price, price, quanity, order, product);
//        }
//        else {
//            quanity += orderdetails.getQuanity();
//            orderdetails.setQuanity(quanity);
//            orderdetails.setAmount(quanity*price);
//        }
//
//        OrderRepo.save(order);
//        OrderDetailRepo.save(orderdetails);
//    }
}
